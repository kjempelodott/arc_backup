"""
Common submit job functions.
"""

import os, re
import arc
from config import Config
from proc import execute_local, execute_remote
from files import write
from log import *


def validate_attributes(jd):
     """
     Checks if GRID (global) job ID and executable are set in job description
     and that runtime environment is resolved. For none-shared filesystems, 
     the scratchdir must also be specified.

     :param jd: job description object
     :type jd: :py:class:`arc.JobDescription`
     """
  
     if 'joboption;gridid' not in jd.OtherAttributes:
          raise ArcError('Grid ID not specified', 'common.submit')
     
     if 'joboption;directory' not in jd.OtherAttributes:
          jd.OtherAttributes['joboption;directory'] = \
              os.path.join(Config.sessiondir, jd.OtherAttributes['joboption;gridid'])

     jd.OtherAttributes['joboption;local_directory'] = jd.OtherAttributes['joboption;directory']

     if Config.remote_sessiondir:
          jd.OtherAttributes['joboption;directory'] = \
              os.path.join(Config.remote_sessiondir, jd.OtherAttributes['joboption;gridid'])
          jd.Application.Output = jd.Application.Output.replace(Config.sessiondir, Config.remote_sessiondir)
          jd.Application.Input = jd.Application.Input.replace(Config.sessiondir, Config.remote_sessiondir)
          jd.Application.Error = jd.Application.Error.replace(Config.sessiondir, Config.remote_sessiondir)

     if 'joboption;controldir' in jd.OtherAttributes:
          Config.controldir = jd.OtherAttributes['joboption;controldir']
     if not jd.Application.Executable.Path:
          raise ArcError('Executable is not specified', 'common.submit')
     if not jd.Resources.RunTimeEnvironment.isResolved():
          raise ArcError('Run-time Environment not satisfied', 'common.submit')
     if not Config.shared_filesystem and not Config.scratchdir:
          raise ArcError('Need to know at which directory to run job: '
                         'RUNTIME_LOCAL_SCRATCH_DIR must be set if '
                         'RUNTIME_NODE_SEES_FRONTEND is empty', 'common.submit')

     has_globalid = False
     for env_pair in jd.Application.Environment:
          if env_pair[0] == 'GRID_GLOBAL_JOBID':
               has_globalid = True
               break
     if not has_globalid:
          globalid = 'gsiftp://%s:%s%s/%s' % (Config.hostname, Config.gm_port,
                                              Config.gm_mount_point, jd.OtherAttributes['joboption;gridid'])
          jd.Application.Environment.append(('GRID_GLOBAL_JOBID', globalid))


def write_script_file(jobscript):
     """
     Write job script to file.

     :param str jobscript: job script buffer
     :return: path to file
     :rtype: :py:obj:`str`
     """
     
     import uuid, stat

     jobscript += '\nrm -- "$0"\n' # self destroy
     mode = stat.S_IXUSR | stat.S_IRUSR | stat.S_IWUSR | stat.S_IXGRP | stat.S_IRGRP | stat.S_IXOTH | stat.S_IROTH

     path = '/tmp/' + str(uuid.uuid4()) + '.sh'

     if not write(path, jobscript, mode, False, Config.remote_host):
          raise ArcError('Failed to write jobscript', 'common.submit')

     return path


def set_req_mem(jd):
   """
   Set memory requirement attributes in job description.

   :param jd: job description object
   :type jd: :py:class:`arc.JobDescription`
   """

   if jd.Resources.IndividualPhysicalMemory.max <= 0:
       nodememory = 0
       if Config.defaultmemory <= 0:
           if (jd.Resources.QueueName in Config.queue
               and hasattr(Config.queue[jd.Resources.QueueName], 'nodememory')):
                nodememory = Config.queue[jd.Resources.QueueName].nodememory
           elif Config.nodememory > 0:
                nodememory = Config.nodememory

       debug('-'*69, 'common.submit')
       debug('WARNING: The job description contains no explicit memory requirement.', 'common.submit')
       if Config.defaultmemory > 0:
           jd.Resources.IndividualPhysicalMemory.max = Config.defaultmemory
           debug('         A default memory limit taken from \'defaultmemory\' in', 'common.submit')
           debug('         arc.conf will apply.', 'common.submit')
           debug('         Limit is: %s mb.' % (Config.defaultmemory), 'common.submit')
       elif nodememory > 0:
           jd.Resources.IndividualPhysicalMemory.max = nodememory
           debug('         A default memory limit taken from \'nodememory\' in', 'common.submit')
           debug('         arc.conf will apply.', 'common.submit')
           debug('         You may want to set \'defaultmemory\' to something', 'common.submit')
           debug('         else in arc.conf to better handle jobs with no memory', 'common.submit')
           debug('         specified.', 'common.submit')
           debug('         Limit is: %s mb.' % (nodememory), 'common.submit')
       else:
           jd.Resources.IndividualPhysicalMemory.max = 1000
           debug('         nodememory is not specified in arc.conf. A default', 'common.submit')
           debug('         memory limit of 1GB will apply.', 'common.submit')
       debug('-'*69, 'common.submit')

   if Config.localtransfer and jd.Resources.IndividualPhysicalMemory.max < 1000:
       debug('-'*69, 'common.submit')
       debug('WARNING: localtransfers are enabled and job has less than 1GB of', 'common.submit')
       debug('         ram. up- and downloaders take up a lot of ram,', 'common.submit')
       debug('         this can give you problems.', 'common.submit')
       debug('-'*69, 'common.submit')


# Limitation: In RTE stage 0, scripts MUST use the 'export' command if any
# new variables are defined which should be picked up by the submit script.
# Also no output from the RTE script in stage 0 will be printed.
def RTE_stage0(jd, lrms, **mapping):
   """
   Source RTE scripts and update job description environment.

   :param jd: job description object
   :type jd: :py:class:`arc.JobDescription`
   :param dict **mapping: additional environment variables
   """     

   if jd.Resources.RunTimeEnvironment.getSoftwareList():
        from parse import RTE0EnvCreator
        envCreator = RTE0EnvCreator(jd, Config, mapping)
        stage0_environ = envCreator.getShEnv()
        stage0_environ['joboption_lrms'] = lrms

        # Source RTE script and update the RTE stage0 dict
        def source_sw(sw, opts):
            if os.path.exists('%s/%s' % (Config.runtimedir, sw)):
                args = 'sourcewithargs () { script=$1; shift; . $script;}; sourcewithargs %s/%s 0' % (Config.runtimedir, sw)
                for opt in opts:
                    args += ' "%s"' % (opt.replace('"', '\\"'))
                args += ' > /dev/null 2>&1 && env'
                handle = execute_local(args, env = stage0_environ)
                stdout = handle.stdout
                if handle.returncode != 0:
                     raise ArcError('Runtime script %s failed' % sw, 'common.submit')
                new_env = dict((k,v.rstrip('\n')) for k,v in (l.split('=', 1) for l in stdout if l != '\n'))
                stage0_environ.update(new_env)
            else:
                warn('Runtime script %s is missing' % sw, 'common.submit')
                #should we exit here?

        # Source RTE scripts from the software list
        sw_list = []
        for sw in jd.Resources.RunTimeEnvironment.getSoftwareList():
            sw_list.append(str(sw))
            source_sw(sw, sw.getOptions())

        # Source new RTE scripts set by the previous step (if any)
        rte_environ = dict((k,v) for k,v in stage0_environ.items() if re.match('joboption_runtime_\d+', k))
        rte_environ_opts = dict((k,v) for k,v in stage0_environ.items() if re.match('joboption_runtime_\d+_\d+', k))
        while len(rte_environ.keys()) > len(sw_list):
           for rte, sw in rte_environ.items():
              try:
                 i = re.match('joboption_runtime_(\d+)', rte).groups()[0]
                 if sw not in sw_list:
                    opts = []
                    for rte_, opt in rte_environ_opts.items():
                       try:
                          j = re.match(rte + '_(\d+)', rte_).groups()[0]
                          opts.append(opt)
                       except:
                          pass
                    source_sw(sw, opts)
                    sw_list.append(sw)
              except:
                 pass
           rte_environ = dict((k,v) for k,v in stage0_environ.items() if re.match('joboption_runtime_\d+', k))
           rte_environ_opts = dict((k,v) for k,v in stage0_environ.items()if re.match('joboption_runtime_\d+_\d+', k))
        # Update jobdesc
        envCreator.setPyEnv(stage0_environ)
        if "RUNTIME_ENABLE_MULTICORE_SCRATCH" in stage0_environ:
             os.environ["RUNTIME_ENABLE_MULTICORE_SCRATCH"] = ""

   # joboption_count might have been changed by an RTE.
   # Save it for accouting purposes.
   if jd.Resources.SlotRequirement.NumberOfSlots > 0:
       try:
           diagfilename = '%s/job.%s.diag' % (Config.controldir, jd.OtherAttributes['joboption;gridid'])
           with open(diagfilename, 'w+') as diagfile:
               diagfile.write('ExecutionUnits=%s\n' % jd.Resources.SlotRequirement.NumberOfSlots)
       except IOError:
           debug('Unable to write to diag file (%s)' % diagfilename)


class JobscriptAssembler(object):
     """
     Parses and expands the jobscript stubs defined in job_script.stubs.
     Each stub is initiated by a line starting with '>>', followed by
     the name of the stub. The stub must be enclosed within two '>' on
     separate lines.::

       >> set_some_vars
       >
       export FOO=bar
       export BAR=baz
       >


     To expand variables, use the Python format syntax %(LOCAL)s.::

       >> set_sessiondir
       >
       export RUNTIME_SESSIONDIR=%(SESSIONDIR)s
       >

     This will evaluate to the session directory specified in the 
     job description, for example::

       export RUNTIME_SESSIONDIR=/scratch/grid/123456
     
      
     It is also possible to define loops that depend on some iterable 
     in the job description object. For example, the attribute
     Application.Environment is an iterable, where each item is a tuple
     with two elements: name of environment variable and value of 
     environment variable. This is mapped to 'ENVS' with macros
     'ENV' and 'ENV_VAL'.

     Loops must be enclosed within two '@' on separate lines. The top '@'
     must be followed by the map name of the iterable and the map name 
     of the macro(s) that resolves the string format variables. The 
     simplest macro is mapped to 'ITEM' and simply returns the current 
     item in the iterable. This is only applicable when each item is a 
     string. Note the '%' in front of each macro name in the first line
     following example.::

        @ ENVS %ENV %ENV_VAL
        export %(ENV)s=%(ENV_VAL)s
        @

     This will evaluate to a list of export lines for every environment 
     variable represented in Application.Environment.


     All format variables, iterables and macros are defined in the 
     ``_map`` attribute.
     """

     def get_standard_jobscript(self):
          """
          Assemble a generic, out-of-the-box jobscript. This does
          not contain the batch system-specific instructions you
          typically find at the top of the jobscript.
          
          return: jobscript
          rtype: :py:obj:`str`
          """
          
          script  = self.get_stub('umask_and_sourcewithargs')
          script += self.get_stub('user_env')
          if Config.localtransfer:
               script += self.get_stub('local_transfer')
          script += self.get_stub('runtime_env')
          script += self.get_stub('move_files_to_node')
          if Config.localtransfer:
               script += self.get_stub('download_input_files')
          script += self.get_stub('rte_stage1')
          script += self.get_stub('cd_and_run')
          script += self.get_stub('rte_stage2')
          if Config.localtransfer:
               script += self.get_stub('upload_output_files')
          else:
               script += self.get_stub('clean_scratchdir')
          script += self.get_stub('move_files_to_frontend')
          return script

     def get_stub(self, stub):
          """
          Get formatted jobscript stub.

          param str stub: name of jobscript stub 
          return: jobscript stub
          rtype: :py:obj:`str`
          """
          return self._stubs.get(stub, '')
     

     def __init__(self, jobdesc):

          self.jobdesc = jobdesc
          self._stubs = {}
          self._ignore = []
          # String format map
          self._map = {
               # Simple strings
               'GRIDID'               : jobdesc.OtherAttributes['joboption;gridid'],
               'SESSIONDIR'           : jobdesc.OtherAttributes['joboption;directory'],
               'STDIN'                : jobdesc.Application.Input,
               'STDOUT'               : jobdesc.Application.Output,
               'STDERR'               : jobdesc.Application.Error,
               'STDIN_REDIR'          : '<$RUNTIME_JOB_STDIN' if jobdesc.Application.Input else '',
               'STDOUT_REDIR'         : '1>$RUNTIME_JOB_STDOUT' if jobdesc.Application.Output else '',
               'STDERR_REDIR'         : '2>$RUNTIME_JOB_STDERR' if \
                                        jobdesc.Application.Output != jobdesc.Application.Error else '2>&1',
               'EXEC'                 : jobdesc.Application.Executable.Path, 
               'ARGS'                 : '" "'.join(list(jobdesc.Application.Executable.Argument)),
               'PROCESSORS'           : jobdesc.Resources.SlotRequirement.NumberOfSlots,
               'NODENAME'             : Config.nodename,
               'GNU_TIME'             : Config.gnu_time,
               'GM_MOUNTPOINT'        : Config.gm_mount_point,
               'GM_PORT'              : Config.gm_port,
               'GM_HOST'              : Config.hostname,
               'LOCAL_SCRATCHDIR'     : Config.scratchdir, 
               'RUNTIMEDIR'           : Config.remote_runtimedir if Config.remote_runtimedir else Config.runtimedir,
               'SHARED_SCRATCHDIR'    : Config.shared_scratch, 
               'IS_SHARED_FILESYSTEM' : 'yes' if Config.shared_filesystem else '',
               'ARC_LOCATION'         : arc.common.ArcLocation.Get(),
               'ARC_TOOLSDIR'         : arc.common.ArcLocation.GetToolsDir(),
               'GLOBUS_LOCATION'      : os.environ.get('GLOBUS_LOCATION', ''),
               # Iterables and associated macros
               'ENVS'                 : jobdesc.Application.Environment, # Iterable
               'ENV'                  : lambda item: item[0], # Macro
               'ENV_VAL'              : lambda item: item[1], # Macro

               'RTES'                 : jobdesc.Resources.RunTimeEnvironment.getSoftwareList(), # Iterable
               'RTE'                  : lambda item: str(item), # Macro
               'OPTS'                 : lambda item: '"%s"' % '" "'.join([opt.replace('"', '\\"') for
                                                                          opt in item.getOptions()]), # Macro
               # To be setup in a later method
               'RUNTIME_CONTROLDIR'   :	'', # Setup later if localtransfer
               'OUTPUT_LISTS'         :	'', # Setup later if NOT localtransfer
               'OUTPUT_FILES'         :	'', # Setup later if NOT localtransfer
               'ITEM'                 : lambda item: item # Generic macro
               }

          if Config.localtransfer:
               self.setup_local_transfer()
          else:
               self.setup_cleaning()
          if not Config.shared_filesystem:
               self.setup_runtime_env()
          self._parse()


     def __getitem__(self, item):
          return self._map.get(item, '')

     def __setitem__(self, item, value):
          self._map[item] = value


     def _parse(self):

          PARSE = 0
          SKIP  = 1
          READ  = 2
          LOOP  = 4

          do = PARSE
          stub_name = ''
          stub = ''
          loop = ''
          _iterable = None
          _macros = None
          _locals = dict(item for item in self._map.items())
                                        
          with open(os.path.join('@prefix@', '@pkgdatasubdir@', 'job_script.stubs'), 'r') as stubs:
               for num, line in enumerate(stubs):
                    try:
                         if do & READ:
                              # END of stub
                              #
                              # Save to stubs map
                              if line[0] == '>':
                                   if stub_name not in self._ignore:
                                        self._stubs[stub_name] = stub
                                   do = PARSE
                         
                              # Encountered loop tag
                              elif line[0] == '@':   

                                   # END of loop stub
                                   # 
                                   # Loop over the iterable, and for each item:
                                   #   run the macro(s) to resolve the string format variable(s)
                                   #   format the loop stub
                                   #   add formatted loop stub to stub
                                   if do & LOOP:
                                        for item in _iterable:
                                             for key in _macros:
                                                  _locals[key] = self._map[key](item)
                                             stub += loop % _locals
                                        do ^= LOOP

                                   # BEGIN loop stub
                                   #
                                   # Get the iterable and macros to resolve the string format variables
                                   else: 
                                        loop = ''
                                        keys = line[1:].split()
                                        key = keys[0]
                                        _iterable = self._map[key]
                                        _macros = []
                                        for key in keys[1:]:
                                             assert(key[0] == '%')
                                             _macros.append(key[1:])
                                        do |= LOOP

                              # Inside loop. Add line to loop stub. Format later
                              elif do & LOOP:
                                   loop += line
                              # Format line and add to stub
                              else:
                                   stub += line % self._map

                         elif do & SKIP:
                              # BEGIN stub
                              #
                              # Everything after the '>' tag is read into the stub string, inlcuding empty lines
                              stub = ''
                              if line[0] == '>':
                                   do = READ

                         elif line[:2] == '>>':
                              # Signals that a new stub is coming up
                              stub_name = line[2:].strip()
                              stub = ''
                              do = SKIP

                    except ValueError:
                         raise ArcError('Incomplete format key. Maybe a missing \'s\' after \'%%( ... )\'',
                                        'common.submit.JobscriptAssembler') 
                    except AssertionError:
                         raise ArcError('Syntax error at line %i in job_script.stubs. Missing \'%%\'.'
                                        % num, 'common.submit.JobscriptAssembler')
                    except KeyError as e:
                         raise ArcError('Unknown key %s at line %i in job_script.stubs.'
                                        % (str(e), num), 'common.submit.JobscriptAssembler')


     def setup_local_transfer(self):
          """
          Create runtime control directory and update job input and output files.
          RUNTIME_CONTROLDIR is added to the string format map.
          """

          import tempfile, shutil
          from os.path import join
          # create runtime controldir
          self['RUNTIME_CONTROLDIR'] = tempfile.mkdtemp(dir = self['SESSIONDIR'], prefix = 'control.')

          ctrdir = Config.controldir
          local_ctrdir = self['RUNTIME_CONTROLDIR']
          gridid = self['GRIDID']

          # securely copy proxy
          with os.fdopen(os.open(join(local_ctrdir, 'job.local.proxy'),
                                 os.O_WRONLY | os.O_CREAT, 0600), 'w') as local_proxy:
               with open(join(ctrdir, 'job.%s.proxy' % gridid), 'r') as proxy:
                    local_proxy.write(proxy.read())

          # prepare input file
          job_local_input = join(local_ctrdir, 'job.local.input')
          shutil.copyfile(join(ctrdir, 'job.%s.input' % gridid), job_local_input)
          with open(job_local_input, 'a') as local_input:
               local_input.write(local_ctrdir + ' *.*\n')
               local_input.write("%s *.*\n" % jd.Application.Output.lstrip(gridid))
               local_input.write("%s *.*\n" % jd.Application.Error.lstrip(gridid))

          # add runtime controldir to output
          job_output = join(ctrdir, 'job.%s.output' % gridid)
          with open(job_output, 'a') as output:
               output.write(local_ctrdir + '\n')
          shutil.copyfile(job_output, join(local_ctrdir, 'job.local.output'))

          # copy the local file to runtime control dir, else create it
          try:
               shutil.copyfile(join(ctrdir, 'job.%s.local' % gridid), join(local_ctrdir, 'job.local.local'))
          except Exception as e:
               with open(join(local_ctrdir, 'job.local.local', 'w')):
                    pass


     def setup_cleaning(self): 
          """
          Setup trash cleaning. No reason to keep trash until gm-kick runs.
          """
          
          output = Config.controldir + '/job.' + self['GRIDID'] + '.output'
          try:
               with open(output, 'r') as outputfile:
                    self['OUTPUT_LISTS'] = []
                    self['OUTPUT_FILES'] = []
                    for name in outputfile:
                         name = (
                              # Replace escaped back-slashes (\).                                
                              # Note: Backslash escapes in 2. argument             
                              # are processed. Pattern explained: First 
                              # look for escaped backslashes (8x\), then
                              # look for other escaped chars (4x\).
                              re.sub(r'\\\\\\\\|\\\\', '\\\\',
                                     # Remove possible remote destination (URL).
                                     # Take spaces and escaping into account.
                                     # URL is the first string which is preceded by
                                     # a space which is not escaped.  
                                     re.sub(r'([^\\](\\\\)*) .*', '\\1', name.strip()).
                                     # Replace escaped spaces and single quotes
                                     replace('\ ', ' ').replace("'", "'\\''").
                                     # Strip leading slashes (/). 
                                     lstrip('/'))
                              )
                         if name[0] == '@':
                              self['OUTPUT_LISTS'].append(name[1:])
                         else:
                              self['OUTPUT_FILES'].append(name)

          except IOError: # Skip cleaning, else output files will be deleted
               self._ignore.append('clean_scratchdir')
               verbose('Failed to read job output file (%s)' % output, 'common.submit')


     def setup_runtime_env(self):
          """
          For non-shared filesystems, replace sessiondir with local scratchdir
          in the stdin, stdout and stderr paths.
          """
          
          self['LOCAL_SCRATCHDIR'] = os.path.join(self['LOCAL_SCRATCHDIR'], self['GRIDID'])
          sdir = self['SESSIONDIR'] + os.path.sep
          for f in ('STDIN', 'STDOUT', 'STDERR'):
               if self[f].startswith(sdir):
                    self[f] = os.path.join(self['LOCAL_SCRATCHDIR'], f.lstrip(sdir))
